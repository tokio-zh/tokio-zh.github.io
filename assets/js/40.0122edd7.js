(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{176:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"直接使用asyncread和asyncwrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接使用asyncread和asyncwrite","aria-hidden":"true"}},[t._v("#")]),t._v(" 直接使用AsyncRead和AsyncWrite")]),t._v(" "),a("p",[t._v("到目前为止，我们都是在Tokio提供的I/O组合器场景下讨论了"),a("code",[t._v("AsyncRead")]),t._v("和"),a("code",[t._v("AsyncWrite")]),t._v("。通常这些就够了，但有时您需要实现自己的组合器，直接执行异步读写。")]),t._v(" "),a("h2",{attrs:{id:"用asyncread读取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用asyncread读取数据","aria-hidden":"true"}},[t._v("#")]),t._v(" 用"),a("code",[t._v("AsyncRead")]),t._v("读取数据")]),t._v(" "),a("p",[a("code",[t._v("AsyncRead")]),t._v("的核心是"),a("code",[t._v("poll_read")]),t._v("方法。该方法检查"),a("code",[t._v("Err")]),t._v("类型是否为"),a("code",[t._v("WouldBlock")]),t._v("，如果是，表明I/O "),a("code",[t._v("read")]),t._v("操作可能被阻塞的，则返回"),a("code",[t._v("NotReady")]),t._v("，这就使我们可以与futures互操作。当你写一个内部包含"),a("code",[t._v("AsyncRead")]),t._v("的Future（或类似的东西，例如"),a("code",[t._v("Stream")]),t._v("）时，"),a("code",[t._v("poll_read")]),t._v(" 很可能就是你将要与之交互的方法。")]),t._v(" "),a("p",[t._v("要记住一点："),a("code",[t._v("poll_read")]),t._v("遵循与"),a("code",[t._v("Future::poll")]),t._v("相同的契约。具体而言，你不能返回"),a("code",[t._v("NotReady")]),t._v("，除非你已安排当前任务在取得进展时，会被通知再次被调用。基于此，我们可以在自己futures的"),a("code",[t._v("poll")]),t._v("方法内调用"),a("code",[t._v("poll_read")]),t._v("; 当我们从"),a("code",[t._v("poll_read")]),t._v("中转发一个"),a("code",[t._v("NotReady")]),t._v("的时候，我们知道这是遵循"),a("code",[t._v("poll")]),t._v("合约的，因为"),a("code",[t._v("poll_read")]),t._v("遵循相同的合约。")]),t._v(" "),a("p",[t._v("Tokio用于确保"),a("code",[t._v("poll_read")]),t._v("以后通知当前"),a("ruby",[t._v("任务"),a("rt",[t._v("task")])]),t._v("的确切机制不在本节讨论的范围，但如果您感兴趣，可以在Tokio内部原理的"),a("a",{attrs:{href:"../internals"}},[t._v("非阻塞I/O")]),t._v("中阅读更多相关内容。")]),t._v(" "),a("p",[t._v("有了这一切，让我们看看如何自己实现"),a("code",[t._v("read_exact")]),t._v(" 这个方法！")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[macro_use]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),t._v(" futures"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" tokio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("prelude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is going to be our Future.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In the common case, this is set to Some(Reading),")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but we'll set it to None when we return Async::Ready")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so that we can return the reader and the buffer.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" ReadExact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Option"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Reading"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Reading"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the stream we're reading from.")]),t._v("\n    reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the buffer we're reading into.")]),t._v("\n    buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// And this is how far into the buffer we've written.")]),t._v("\n    pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We want to be able to construct a ReadExact over anything")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// that implements AsyncRead, and any buffer that can be")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// thought of as a &mut [u8].")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" read_exact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" ReadExact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n    R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsyncRead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsMut"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadExact")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Reading "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initially, we've read no bytes into buffer.")]),t._v("\n        pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Future "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ReadExact"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n    R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsyncRead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsMut"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When we've filled up the buffer, we want to return both the buffer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with the data that we read and the reader itself.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Error "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Poll"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Reading "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("as_mut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check that we haven't finished")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Try to read data into the remainder of the buffer.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Just like read in std::io::Read, poll_read *can* read")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fewer bytes than the length of the buffer it is given,")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and we need to handle that by looking at its return")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value, which is the number of bytes actually read.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Notice that we are using try_ready! here, so if poll_read")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns NotReady (or an error), we will do the same!")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We uphold the contract that we have arranged to be")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// notified later because poll_read follows that same")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// contract, and _it_ returned NotReady.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("try_ready!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll_read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If no bytes were read, but there was no error, this")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// generally implies that the reader will provide no more")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data (for example, because the TCP connection was closed")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// by the other side).")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("ErrorKind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("UnexpectedEof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"early eof"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            None "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"poll a ReadExact after it\'s done"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We need to return the reader and the buffer, which we can only")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do by moving them out of self. We do this by taking our state")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and leaving `None`. This _should_ be fine, because poll()")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// requires callers to not call poll() again after Ready has been")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returned, so we should only ever see Some(Reading) when poll()")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is called.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reading "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"must have seen Some above"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Async"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ready")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"用asyncwrite写数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用asyncwrite写数据","aria-hidden":"true"}},[t._v("#")]),t._v(" 用"),a("code",[t._v("AsyncWrite")]),t._v("写数据")]),t._v(" "),a("p",[t._v("就像"),a("code",[t._v("poll_read")]),t._v("是"),a("code",[t._v("AsyncRead")]),t._v("的核心一样，"),a("code",[t._v("poll_write")]),t._v("也是"),a("code",[t._v("AsyncWrite")]),t._v("的核心部分。和"),a("code",[t._v("poll_read")]),t._v("一样，该方法检查"),a("code",[t._v("Err")]),t._v("类型是否为"),a("code",[t._v("WouldBlock")]),t._v("，如果是，则表明"),a("code",[t._v("write")]),t._v("操作将被阻塞，就返回"),a("code",[t._v("NotReady")]),t._v("，这再次让我们与futures互操作。"),a("code",[t._v("AsyncWrite")]),t._v("也有一个"),a("code",[t._v("poll_flush")]),t._v("，它提供了一个"),a("code",[t._v("Write")]),t._v(" "),a("code",[t._v("flush")]),t._v("的异步版本。"),a("code",[t._v("poll_flush")]),t._v("确保先前通过"),a("code",[t._v("poll_write")]),t._v("写入的任何字节都被刷到底层I/O资源上（例如，发送网络数据包）。类似于"),a("code",[t._v("poll_write")]),t._v("，它封装了"),a("code",[t._v("Write::flush")]),t._v("，映射"),a("code",[t._v("WouldBlock")]),t._v("错误为"),a("code",[t._v("NotReady")]),t._v("，指示flush仍在进行中。")]),t._v(" "),a("p",[a("code",[t._v("AsyncWrite")]),t._v("的"),a("code",[t._v("poll_write")]),t._v("，以及"),a("code",[t._v("poll_flush")]),t._v("都遵循与"),a("code",[t._v("Future::poll")]),t._v("和"),a("code",[t._v("AsyncRead::poll_read")]),t._v("相同的合约，即如果你想返回"),a("code",[t._v("NotReady")]),t._v("，则必须保证当前任务能够被在可以进行下去的时候被通知。和"),a("code",[t._v("poll_read")]),t._v("一样，这意味着我们可以安全地在我们自己的futures中调用这些方法，因为我们知道我们也在遵守合同。")]),t._v(" "),a("p",[t._v("Tokio使用和"),a("code",[t._v("poll_read")]),t._v("相同的通知机制来通知"),a("code",[t._v("poll_write")]),t._v("和"),a("code",[t._v("poll_flush")]),t._v("，你可以在Tokio内部原理的"),a("a",{attrs:{href:"../internals"}},[t._v("非阻塞I/O")]),t._v("中阅读更多相关内容。")]),t._v(" "),a("h3",{attrs:{id:"关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭","aria-hidden":"true"}},[t._v("#")]),t._v(" 关闭")]),t._v(" "),a("p",[a("code",[t._v("AsyncWrite")]),t._v("还添加了一个不属于"),a("code",[t._v("Write")]),t._v("的方法："),a("code",[t._v("shutdown")]),t._v("。从它的文档：")]),t._v(" "),a("blockquote",[a("p",[t._v("启动或尝试关闭此writer，在I/O连接完全关闭时返回成功。")])]),t._v(" "),a("p",[t._v("此方法旨在用于I/O连接的异步关闭。例如，这适用于实现TLS连接的关闭或调用"),a("code",[t._v("TcpStream::shutdown")]),t._v("来关闭"),a("ruby",[t._v("代理连接"),a("rt",[t._v("proxied connection")])]),t._v("。一些协议有时需要清除最终的数据，或者发起优雅关闭握手，适当地读写更多数据。此方法就是实现这些协议所需的优雅关闭握手逻辑的钩子方法（扩展点）。")]),t._v(" "),a("p",[t._v("总结"),a("code",[t._v("shutdown")]),t._v("：它是一种告诉写一方不再有新数据产生的方法，并且它应该以底层I/O协议所需的任何方式指示。例如，对于TCP连接，这通常需要关闭TCP"),a("ruby",[t._v("通道"),a("rt",[t._v("channel")])]),t._v("的写入端，这样，另一端就可以读到0字节，表明已到文件尾。通常，你可以将"),a("code",[t._v("shutdown")]),t._v("视为你要实现"),a("code",[t._v("Drop")]),t._v("时你需要同步地执行的方法; 只是在异步世界中，你不能在"),a("code",[t._v("Drop")]),t._v("简单地处理，因为你需要有一个"),a("ruby",[t._v("执行器"),a("rt",[t._v("executor")])]),t._v("轮询你的writer！")]),t._v(" "),a("p",[t._v("请注意，在一个实现了"),a("code",[t._v("AsyncWrite")]),t._v("和"),a("code",[t._v("AsyncRead")]),t._v("的"),a("em",[t._v("写半")]),t._v("部分调用"),a("code",[t._v("shutdown")]),t._v("不会关闭"),a("em",[t._v("读半")]),t._v("部分。您通常可以继续随意读取数据，直到另一方关闭相应的"),a("em",[t._v("写半")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"一个使用asyncwrite的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个使用asyncwrite的例子","aria-hidden":"true"}},[t._v("#")]),t._v(" 一个使用"),a("code",[t._v("AsyncWrite")]),t._v("的例子")]),t._v(" "),a("p",[t._v("废话少说，让我们来看看我们如何实现：")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[macro_use]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),t._v(" futures"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" tokio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("prelude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is going to be our Future.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// It'll seem awfully familiar to ReadExact above!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In the common case, this is set to Some(Writing),")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but we'll set it to None when we return Async::Ready")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so that we can return the writer and the buffer.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" WriteAll"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Option"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Writing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Writing"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the stream we're writing into.")]),t._v("\n    writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the buffer we're writing from.")]),t._v("\n    buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// And this is much of the buffer we've written.")]),t._v("\n    pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" usize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We want to be able to construct a WriteAll over anything")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// that implements AsyncWrite, and any buffer that can be")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// thought of as a &[u8].")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" write_all"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" WriteAll"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n    W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsyncWrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Writing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initially, we've written none of the bytes from buffer.")]),t._v("\n        pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Future "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" WriteAll"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("\n    W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsyncWrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AsRef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("u8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// When we've written out the entire buffer, we want to return")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// both the buffer and the writer so that the user can re-use them.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Error "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" Poll"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Writing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" buffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("as_ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check that we haven't finished")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Try to write the remainder of the buffer into the writer.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Just like write in std::io::Write, poll_write *can* write")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fewer bytes than the length of the buffer it is given,")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and we need to handle that by looking at its return")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value, which is the number of bytes actually written.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We are using try_ready! here, just like in poll_read in")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReadExact, so that if poll_write returns NotReady (or an")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error), we will do the same! We uphold the contract that")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we have arranged to be notified later because poll_write")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// follows that same contract, and _it_ returned NotReady.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("try_ready!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll_write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If no bytes were written, but there was no error, this")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// generally implies that something weird happened under us.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We make sure to turn this into an error for the caller to")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deal with.")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                            io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("ErrorKind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("WriteZero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zero-length write"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            None "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("panic!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"poll a WriteAll after it\'s done"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We use the same trick as in ReadExact to ensure that we can return")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the buffer and the writer once the entire buffer has been written out.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" writing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"must have seen Some above"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Async"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ready")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("writing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("writer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);s.default=e.exports}}]);
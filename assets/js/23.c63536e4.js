(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{159:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("我们将使用到目前为止所覆盖的内容来构建echo服务器。这是一个Tokio应用程序，它包含了我们迄今为止学到的所有内容。服务器将简单地从连接的客户端接收消息，并将收到的相同消息发送回客户端。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("完整的代码可以在"),n("a",{attrs:{href:"https://github.com/tokio-rs/tokio/blob/master/examples/echo.rs",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v("找到。")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("首先，生成一个新的箱子。")]),t._v(" "),t._m(3),n("p",[t._v("接下来，添加必要的依赖项：")]),t._v(" "),t._m(4),n("p",[t._v("main.rs")]),t._v(" "),t._m(5),n("p",[t._v("现在，我们为服务器设置必要的结构：")]),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("同样，在执行者上生成服务器任务之前，实际上不会执行任何工作。")]),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("既然我们有传入的客户端连接，我们应该处理它们。")]),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("该copy函数有两个参数，从哪里读取以及在哪里写入。 但是，我们只有一个参数，使用"),n("code",[t._v("socket")]),t._v("。 幸运的是，有一个方法"),n("a",{attrs:{href:"https://docs.rs/tokio-io/0.1/tokio_io/trait.AsyncRead.html#method.split",target:"_blank",rel:"noopener noreferrer"}},[t._v("split"),n("OutboundLink")],1),t._v("，它将可读和可写的流分成两半。 此操作允许我们独立地处理每个流，例如将它们作为"),n("code",[t._v("copy")]),t._v("函数的两个参数传递。")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),n("p",[t._v("对"),n("a",{attrs:{href:"https://docs.rs/tokio-executor/0.1/tokio_executor/fn.spawn.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("tokio::spawn"),n("OutboundLink")],1),t._v("的调用是关键所在。 至关重要的是我们希望所有"),n("code",[t._v("clients")]),t._v("同时取得进展，而不是在完成另一个"),n("code",[t._v("client")]),t._v("时阻止其中一个。 为此，我们使用"),n("code",[t._v("tokio :: spawn")]),t._v("函数在后台执行工作。")]),t._v(" "),t._m(17)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"示例：echo服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例：echo服务器","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例：Echo服务器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将能够使用我们在"),s("code",[this._v("hello world")]),this._v("部分中创建的基本Tcp客户端来测试此echo服务器 。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("$ cargo new --bin echo-server\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[this._v("cd")]),this._v(" echo-server\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-toml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-toml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("dependencies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key property"}},[t._v("tokio")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.1"')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),t._v(" tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),t._v(" futures"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("net"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("TcpListener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("prelude"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("绑定"),n("code",[t._v("TcpListener")]),t._v("到本地端口。")]),t._v(" "),n("li",[t._v("定义接受入站连接并处理它们的任务。")]),t._v(" "),n("li",[t._v("生成服务器任务。")]),t._v(" "),n("li",[t._v("启动Tokio运行时")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1:6142"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" listener "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TcpListener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Here we convert the `TcpListener` to a stream of incoming connections")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with the `incoming` method. We then define how to process each element in")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the stream with the `for_each` combinator method")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("incoming")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("for_each")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: Process socket")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map_err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Handle error by printing to STDOUT.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"accept error = {:?}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"server running on localhost:6142"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    # "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `select` completes when the first of the two futures completes. Since")]),t._v("\n    # "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// future::ok() completes immediately, the server won't hang waiting for")]),t._v("\n    # "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more connections. This is just so the doc test doesn't hang.")]),t._v("\n    # "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("futures"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("future"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start the server")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This does a few things:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// * Start the Tokio runtime")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// * Spawns the `server` task onto the runtime.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// * Blocks the current thread until the runtime becomes idle, i.e. all")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   spawned tasks have completed.")]),t._v("\n    tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这里，我们创建了一个可以侦听传入TCP连接的"),s("code",[this._v("TcpListener")]),this._v("。在监听器上， 我们调用incoming，将监听器转换为入站客户端连接流。然后我们调用for_each，它将产生每个入站客户端连接。 目前我们没有对此入站连接做任何事情 - 这是我们的下一步。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦我们拥有了我们的服务器，我们就可以将它交给"),s("code",[this._v("tokio::run")]),this._v("。到目前为止，我们的服务器功能一无所获。由Tokio运行时驱动我们的"),s("code",[this._v("Future")]),this._v("完成。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("注意：我们必须在服务器上调用"),n("code",[t._v("map_err")]),t._v("，因为"),n("code",[t._v("tokio :: run")]),t._v("需要一个"),n("code",[t._v("Item")]),t._v("为type（）和"),n("code",[t._v("Error")]),t._v("为type（）的"),n("code",[t._v("Future")]),t._v("。 这是为了确保在将"),n("code",[t._v("Future")]),t._v("交付给运行时之前处理所有值和错误。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理连接")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们只想将从套接字读取的所有数据复制回套接字本身（例如“echo”）。 我们可以使用标准的"),s("code",[this._v("io :: copy")]),this._v("函数来做到这一点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后，"),s("code",[this._v("copy")]),this._v("函数返回一个"),s("code",[this._v("Future")]),this._v("，当复制操作完成时，将接收此"),s("code",[this._v("Future")]),this._v("，解析为复制的数据量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们来看看我们再次传递给"),s("code",[this._v("for_each")]),this._v("的闭包。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" server "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listener"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("incoming")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("for_each")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// split the socket stream into readable and writable parts")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copy bytes from the reader into the writer")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" amount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" writer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" msg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" amount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wrote {} bytes"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" amount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error: {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// spawn the task that handles the client connection socket on to the")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tokio runtime. This means each client connection will be handled")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// concurrently")]),t._v("\n  tokio"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("spawn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如您所见，我们已将"),n("code",[t._v("socket")]),t._v("流拆分为可读写部分。 然后我们使用"),n("code",[t._v("io :: copy")]),t._v("从"),n("code",[t._v("reader")]),t._v("读取并写入"),n("code",[t._v("writer")]),t._v("。 我们使用"),n("code",[t._v("then")]),t._v(" 组合器来查看"),n("code",[t._v("amount")]),t._v("未来的"),n("code",[t._v("Item")]),t._v("和"),n("code",[t._v("Error")]),t._v("作为"),n("code",[t._v("Result")]),t._v("打印一些诊断。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们没有这样做，那么"),s("code",[this._v("for_each")]),this._v("中块的每次调用都会在一次解决，这意味着我们永远不会同时处理两个客户端连接！")])}],!1,null,null,null);s.default=e.exports}}]);